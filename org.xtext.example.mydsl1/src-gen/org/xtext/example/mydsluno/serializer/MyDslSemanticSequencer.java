/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsluno.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsluno.myDsl.Model;
import org.xtext.example.mydsluno.myDsl.MyDslPackage;
import org.xtext.example.mydsluno.myDsl.Pioche;
import org.xtext.example.mydsluno.myDsl.Uno;
import org.xtext.example.mydsluno.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.PIOCHE:
				sequence_Pioche(context, (Pioche) semanticObject); 
				return; 
			case MyDslPackage.UNO:
				sequence_Uno(context, (Uno) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     uno+=Uno+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pioche returns Pioche
	 *
	 * Constraint:
	 *     unefois+=UneFois
	 */
	protected void sequence_Pioche(ISerializationContext context, Pioche semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Uno returns Uno
	 *
	 * Constraint:
	 *     (
	 *         pioche+=Pioche 
	 *         poser+=Poser 
	 *         main+=Main 
	 *         cartespe+=CarteSpe 
	 *         temps+=Temps? 
	 *         tas+=Tas 
	 *         nbcarte+=NbCarte?
	 *     )
	 */
	protected void sequence_Uno(ISerializationContext context, Uno semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
